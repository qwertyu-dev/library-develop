分かりました。以下、プロジェクト対応方針として、各セクションに説明を加えた文書を作成しました。

# プロジェクト対応方針

## 1. プロジェクトの概要
本プロジェクトは、既存システムの機能を新しいアプリケーションに移植することを目的としています。原則として現状の仕様を維持しつつ、長年溜まってきた問題の解決と、保守性の向上を図ります。既存システムの資源を最大限活用しながら、新しいアプリケーションへとシステムを移行させます。

## 2. 対象資源 
以下の既存システムの資源を対象とします。
- 仕様書: システムの仕様を定義した文書
- 実装コード: 既存システムのソースコード
- 過去の申請データ: 処理の入力として使用された過去のデータ
- リファレンステーブルなどのデータ資源: システムが参照するマスタデータなど

## 3. 要件定義
### 3.1 基本方針
- 現状仕様を原則維持したまま新システムへの移植を行います。
- 構造上の問題が確認された場合は、仕様を見直して課題を解消します。
- 長年の運用で発生したバックログ問題を解決します。

### 3.2 改修事項
- 改修が必要な事項を一覧化し、改修方針を定義します。  
- 一部の制約事項については、一時的にマニュアル対応を許容します。ただし、固定された条件に限定し、保守フェーズで発生する組織変更対応はコード実装で対処します。
- 組織変更など、システムに変化が生じた場合は、原則としてコード修正やパターン編集を行い、マニュアル対応は追加しません。

### 3.3 非対象事項
- 本移植で対象外となる事項を選別し、その理由を明確化します。
- 保守フェーズで発生が想定される制約事項やマニュアル対応が必要な事項を特定します。  

### 3.4 リファクタリング
- ネストが深くなっているなど保守性を損なう要因をリファクタリングにより解決します。
- 責務を単一化し、ネストが深くなる状況を回避する設計を目指します。

### 3.5 組織変更対応
- 組織変更など、システム構造に変化が生じた場合は、極力コード修正は行わず、構成定義テーブルの修正で対応できるよう設計します。

### 3.6 処理フローアーキテクチャ
- 更改後の処理フローアーキテクチャは、豊田さんの検討版を前提として詰めます。

### 3.7 インターフェース  
- インプット(利用申請データ)は変更を想定しています。
- アウトプット(連携システム向けCSVデータ送信インターフェース)は変更しません。

### 3.8 保守ガイド
- 開発者向けの保守ガイドを作成します。内容は以下を含みます。
  - 組織変更が発生した際の調査と対応事項
  - 要件変更が生じた際の対応事項  
  - 原則、ソースコードへのダイレクト修正は行わない
  - 改修の差し込み方法

## 4. 技術要素
- プログラミング言語にPythonを採用します。
  - Pythonフレームワークは使用しません。
  - Validation処理にはpydanticライブラリを採用します。
- バッチ処理およびジョブ制御にJP1を使用します。  
- データベースは使用しません。代わりにPickleを使ってデータの永続化を行います。

## 5. 運用要素
- 一部の定義メンテナンスについては、マニュアル対応を許容します。
- リグレッション環境で処理をシミュレーションできる環境を用意します。
- 申請データの変更は、ライブラリ修正で本番環境に反映します。
- 本番データをリグレッション環境に書き出す必要があります(Vconなどの特別運用を前提)。
- 各フェーズのデータはアクセス権限が制限されます。
- 各フェーズのデータ編集は同時実行できないよう制御が必要です。

## 6. テスト要素
### 6.1 単体テスト
- テストコードを作成し、単体テストを実施します。
- テストコードは実装と同時に作成します(後からひとまとめて作成しません)。  
- テストコード作成にはpytestを使用します。

### 6.2 結合テスト
- 結合テストは、Jenkinsで夜間の日次実行によるデグレチェックで実施します。

### 6.3 AI駆動開発
- AIによるテストコード生成を採用する場合の基準を設けます。
- 人による確認を経た上で、プロンプト方式でテストコードを再生成できるようにします。
  - 最初からすべての条件を満たしたコードは生成されません。
  - テストコードとテストケースの条件付き生成(プロンプト)を行います。
  - テストケース自体の説明も生成させます。

## 7. 申請者向けガイド
- 新ルールの適用を想定した申請者向けガイドを作成します。以下のフェーズを含みます。
  - 入力データ精査
  - 受付処理
  - パターン処理
  - データ反映・データ送信

## 8. フェーズ間インターフェース
- フェーズ間でのファイルインターフェースを持つ構造は維持します。
- フェーズ間での過剰なバリデーションチェックやデータ整合性チェックは省略します。

### 8.1 入力データフェーズ
- バリデーションチェックと整合性チェックを行います。
- 申請者データに関するチェックを行いますが、入力データの信用性は必ずしも高くありません。

### 8.2 受付処理フェーズ
- バリデーションチェックと整合性チェックは行いません。

### 8.3 パターン処理フェーズ
- 整合性チェックを行います。 
- 未知の問題を検出します。
- データの観点から矛盾がないことを確認します。

### 8.4 ファイル送信フェーズ
- 外部への送信に関するバリデーションチェックを行います。

### 8.5 データ永続化
- 既存システムではデータベースを使用していましたが、新システムではデータベースは使用しません。
- データの永続化にはPickleを使用します。
- CSVファイルは使用しません。

### 8.6 パターン処理の例外対応
- 「例外対応」の編集定義の立ち位置は、現行の仕様を維持します。

## 9. 構造の見直し
### 9.1 中間組織の表現方法と親子関係管理
- 申請データに依存しない、別の親子関係定義の持ち方を検討します。
- 部店名称編集パターンの定義をコード内で持たない方式を検討します。

### 9.2 部店編集と課Gr編集の見直し  
- 部店変更時に課Grや新規に対して過剰に変更明細が作成される問題を解決します。
  - 現状は人がその過剰生成分を目で確認し、手作業で削除しています。
- 過剰生成を自動でチェックし回避する方法を検討・実装します。

### 9.3 コンパチ確認
- 移行前後の動作を検証する方法を確立します。

## 10. アプリ設計のステップ
- 基礎検討フェーズ
- データ保守フローの定義

---

９章と１０章のブラッシュアップ

## 9. 構造の見直し
### 9.1 中間組織の表現方法と親子関係管理
申請データに依存しない別の親子関係定義方式を検討する必要があります。現行では、申請データ内に組織の親子関係が含まれているため、データ変更の度に構造を修正する必要があります。これを回避するため、申請データとは別に、組織構造自体を定義するマスタデータを持つことを検討します。

また、部店名称の編集パターンの定義をコード内に組み込まず、別の定義ファイルやデータベースで管理する方式も検討課題となります。これにより将来の編集パターン変更への柔軟な対応が可能になると考えられます。

### 9.2 部店編集と課Gr編集の見直し
現行システムでは、部店変更時に関連する課GrouptやNew規定に対しても自動的に変更明細が作成されてしまう問題があります。現状は目視確認による手作業で過剰な変更明細を削除しています。

この問題を解決するため、不要な変更明細を自動で検出し、作成を抑止する機能を実装します。具体的には、部店変更の組み合わせパターンを分析し、本当に変更が必要な課Groupなどを特定できるロジックを組み込む必要があります。

### 9.3 コンパチ確認
移行前の既存システムと、移行後の新システムの動作を比較検証する手段を確立する必要があります。同一の入力データに対する出力結果を比較できるよう、テストデータの準備やデータ抽出方法、比較チェック方式などを定義します。また、単体テストでカバーしきれない結合動作についても、検証の仕組みを用意します。

## 10. アプリ設計のステップ  
新システムの基本設計に先立ち、基礎検討を行う必要があります。基礎検討では、アーキテクチャの全体像、採用技術、開発手法、テスト戦略などの基本方針を定めます。この段階で上位層の設計を固め、次のステップに進むための準備を行います。

また、データの保守フローを整理し、定義付けを行う必要があります。申請データや定義データの反映方法、永続化の手段、アクセス制御など、一連のデータフローを設計し、ドキュメント化しておく必要があります。これにより、運用保守体制を整備しやすくなります。

以上が9章と10章についての想定される対応の説明となります。今後さらに検討を重ね、具体的な対応方針が定まれば、内容を更新していく予定です。

