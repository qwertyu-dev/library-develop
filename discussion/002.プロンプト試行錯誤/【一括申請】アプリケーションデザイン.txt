# 役割
あなたは世界最高のアプリケーション設計エンジニアです
あなたの仕事は、要件に対するアプリケーションデザイン最適化を提案することです。
以下の<step>に従って、機能設計文書及びUMLによる設計詳細化を行います。

ステップバイステップで進めますので
一気に各Stepを行わないようにしてください

<step>
	<step1>要件を整理する</step1>
	<step2>アプリケーケーションデザイン案を複数提案する</step2>
	<step3>アプリケーションデザインを選ぶ</step3>
	<step4>UMLで表現する(PlantUML)</step4>
	<step5>機能設計構成案を作成する</step5>
	<step6>機能設計文書を作成する</step6>
	<step7>推敲・校正する</step7>
	<step8>asciidoc/plantUML形式で出力</step8>
</step>

では、まず<step1>要件を整理する</step1>から進めましょう。
要件を記載しますので以下<requests>を整理してください。
結果は必ず<mainpoint>で囲み、番号も割り振ってください
コピペできる形式で出力してください

<requests>
- ３部門からの申請に基づき、部店及び配下の課Gr情報の管理を行う
- 人事、海外、関連３部門からExcelで申請がある
  - ３部門の申請シートフォーマットが異なっている
- Excelファイルは社内の文書承認回付システム経由で受領する
  - Excelをやり取りするためのWebインターフェースは不要
- 申請データのチェック
  - 入力シートに対するValidaionを行う（単一項目の型、範囲チェック）
  - 入力シートに対する整合性チェック（複数項目による型・範囲・相関チェック、外部データを利用してのチェック）
  - 統一レイアウト変換前にValidaion/整合性チェックを行う
  - Validaion/整合性チェクにはpythonのpydanticライブラリを使用して部品作成に注力できるようにする
- 統一レイアウトへの変換
  - 移植システムでは異なるフォーマットを統一レイアウトに変換する
- 統一レイアウト変換後の永続化データ
  - 統一レイアウト変換結果をpythonのpickle形式で出力する
- 入力項目定義の見直し
  - 申請部署には現行入力に対して新しいルールで入力していただく
  - 中間組織に対する申請の書き方
  - 備考欄に書いてある内容はシステム取り込みはしない
    - 現行では支店内営業部定義やエリア情報など記載があるがうまく取り込めない原因になっている
- 管理者用ユーザーインターフェース
  - 運用管理という既存のシステムを使用し運用機能サービスを利用します
  - 個別に作る必要はありません
- OS構築にはAWSを使用しますがEC2程度のスペック、DISK容量も大量には不要
  - ストレージはEC2内に持っているものを使用します、外部保有は想定しません
  - 結果はOS下のフォルダに保有程度で問題ありません
- 申請データ件数
  - 申請データ自体は高々数百件程度です
  - 申請区分は新設・変更・廃止となります
- マスターデータ
  - 申請データをマスターデータに反映することになりますが、本機能では担当しません
  - マスターデータは高々１万件オーダでありDBMSの導入は不要と判断しています
- スケールに対する考慮は不要
  - 3ファイルのExcelファイル処理でありスケールについて拡張性考慮は不要です
- 初期開発コストはできるだけ抑える必要があります
  - 将来に渡り、リソース大幅増の要件はありません
  - 仕様自体は大きく変わることはありません、Excelからのデータ取り込みが役割です
</requests>


# 
続いて<step2>です
今出力した<mainpoint>についてアプリ構成案を３つ考えてください。
３つの構成案は必ず<system1><system2><system3>で囲み、番号を振ってください
コピペできる形式で出力してください


#
続いて<step3>です
<system1><system2><system3>から最もメリットのある構成を選定してください。
メリット・デメリットを表形式で表し、なぜその案を選定したのか示してください
選定結果は必ず<result>で囲んでください
コピペできる形式で出力してください


# 
続いて<step4>です
<result>の結論をベースに、システム構成を表現する各種UMLを生成してください。
出力はPlantUMLで行ってください
- コンポーネント図
- シーケンス図
- アクティビティ図
文法エラーが出ないよう、記述してください
asciidoc出力を見越して以下のフォーマットとし、指定の位置にそれぞれ出力してください
copyオペができるように出力してください

それぞれのPlantUML生成結果毎に対し
へダーとして以下2行を、生成したUMLに付与してください
[plantuml]
----

フッターとして以下1行を、生成したUMLに付与してください
----

出力結果は必ず<umls>で囲ってください
コピペできる形式で出力してください



#
続いて<step5>です
<一括申請>から、機能設計書のサブセクション構成案（一括申請）について、本機能をサブセクション扱いとして
文書構成案について提示してください
サブセクション構成案は必ず<document-structure_一括申請>で囲み、構成項目に通番を振ってください
コピペできる形式で出力してください
- 一般に言われる、概要やシステム構成といったサブセクションには書かない事項は入れないようにしてください。
- 非機能要件は不要
- テスト要件は不要
- 移行要件は不要
- 運用要件は不要



#
続いて<step6>です
サブセクション機能設計書の章立ては<document-ruleA>をベースとしつつ<document-structure_一括申請>要素を必ずマージしてタイトル・サブタイトルに組み込んでください
新しい章立ては出力結果は必ず<document-new-title_一括申請>で囲み、番号を振ってください
適当に改行を入れて、見やすくしてください
変更を行った章立ては、変更点を<title-revision_一括申請>タグ内に簡潔にまとめてください
本文はまだ書かないでください

以下の項目は目次に含める必要はありません
- マスターデータ反映制御（将来の拡張用） 
- 管理者用インターフェース
- 既存の運用管理システムの利用
- 開発環境 
- コーディング規約
- 参考資料
- 関連文書
- 用語集

<document-ruleA>
1.要件定義
  1.1.要求分析
    - 要件概略を記載する
  1.2.移植での改善方針
    - 一括利用申請ファイルの項目見直し
    - 一括利用申請ファイル取り込み後、統一レイアウトへ変換する
    - 単一責務化
      - 編集処理を後続フェーズの受付処理やパターン処理に委譲する
      - 受付処理で行われているValidaion/整合性チェックを引き受ける
2.機能定義
  - 機能概要
    - 一括利用申請ファイル受領
    - 一括利用申請ファイル取り込み
    - 統一レイアウトへの変換
    - 取り込み後データの出力
  - データ反映処理の種類
    - データ精査に必要なテーブルデータの読み込み
    - データ精査実施
      - Validaion
      - 整合性チェック
      - エラー検出
  - 統一レイアウトにデータマッピング
    - マッピング定義は別紙に記載する
  - 処理フロー図 PlantUML形式で生成する
3.入出力データ
  - 入力　Excelファイル
  - 出力 pickleファイル
4.例外設計
  - 例外一覧を定義
    - 管理番号
    - 発生事象定義
    - 原因定義
    - 対処指針
5.ロギング設計
  - どのファイルをいつ取り込みしたかの記録
  - Validation/整合性チェックエラーでのエラー位置特定情報
    - Excelファイル、シート名、行・列位置、値、正しい型想定・値など
6.セキュリティ要件
7.運用記述
  - リグレ環境で実施する
  - データの取扱
    - 受付データは保管しない
    - 処理済結果はリポジトリ管理する
  - 実行スケジュール
    - Jenkinsで自動スケジュール設定
    - マニュアル対応

7.別紙
</document-ruleA>


<document-new-title>の構成案に從い、本件を機能設計書のサブセクションとして記述してください
表形式で書いたほうがわかりやすい箇所は対応してください
<umls>作成したplantumlオブジェクトは漏らさず、適切な位置に差し込んでください
各サブセクションはその末端のセクションに至るまで、各々2000文字で記載して下しさい
生成した文書は<document-result>で囲ってください
コピペできる形式で出力してください




#
続いて<step7>です
<document-result>について、推敲と校正を行ってください
- 設計書に記載した流れはわかりやすく、前後しているようなところ、説明に矛盾がないか
- 誤字脱字や不適切な表現はないか
- 設計書の記述が、プロジェクトステークホルダーや開発エンジニアに向けても適切に書かれているか
- <umls>で作成した結果は、文書内の適切な位置に盛り込んでください、PlantUML形式で対応してください
- 必要に応じて加筆修正を行ってください
  - その結果、文字数が指定数より超過してもOKです
- 必ず<document-final>で結果を囲ってください
- 修正を行った場合は変更点を<revision>タグ内に簡潔にまとめてください
コピペできる形式で出力してください



# 
続いて<step8>です
<document-final>をasciidocで出力して下さい
コピペできるよう出力してください


